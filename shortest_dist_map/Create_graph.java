
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.StringTokenizer;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Create_graph.java
 *
 * Created on Apr 1, 2013, 10:09:45 PM
 */
/**
 *
 * @author Daniel
 */
public class Create_graph extends javax.swing.JFrame {
 ArrayList<Node> nodes = new ArrayList<Node>();
 ArrayList<Edge> edges = new ArrayList<Edge>();
    /** Creates new form Create_graph */
    public Create_graph() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        create = new javax.swing.JButton();
        cancel = new javax.swing.JButton();
        log_out = new javax.swing.JButton();
        road_name = new javax.swing.JTextField();
        from_node = new javax.swing.JTextField();
        to_node = new javax.swing.JTextField();
        distance = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Create new Graph (new road map)");

        jLabel2.setText("Road's name:");

        jLabel3.setText("From point :");

        jLabel4.setText("To point: ");

        jLabel5.setText("distance:");

        create.setText("Create");
        create.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createActionPerformed(evt);
            }
        });

        cancel.setText("cancel");
        cancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelActionPerformed(evt);
            }
        });

        log_out.setText("log out");
        log_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                log_outActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(distance, javax.swing.GroupLayout.DEFAULT_SIZE, 208, Short.MAX_VALUE)
                                    .addComponent(to_node)
                                    .addComponent(from_node)
                                    .addComponent(road_name)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(create)
                                .addGap(47, 47, 47)
                                .addComponent(cancel)))
                        .addGap(46, 46, 46)
                        .addComponent(log_out)))
                .addGap(83, 83, 83))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(road_name, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(from_node, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel4)
                    .addComponent(to_node, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(distance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(48, 48, 48)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(create)
                    .addComponent(log_out)
                    .addComponent(cancel))
                .addContainerGap(54, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void cancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelActionPerformed
         this.setVisible(false);
         new manager_form().setVisible(true);
    // TODO add your handling code here:
}//GEN-LAST:event_cancelActionPerformed

private void log_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_log_outActionPerformed
         this.setVisible(false);
         new user_form().setVisible(true);
    // TODO add your handling code here:
}//GEN-LAST:event_log_outActionPerformed

private void createActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createActionPerformed
     // create a graph(map) and store data in a file graph.txt
     // Fisrt read data from files Node.text and Edge.txt
    
    //***************************************************************************************
         BufferedReader  fin_temp1;		

		try
		{
		    // Open an input stream
		    fin_temp1 = new BufferedReader (new FileReader("Node.txt"));
                  
                    
                    while(fin_temp1.ready()){
		    //System.out.println( fin2.readLine());
                    String text = fin_temp1.readLine();
               
               
                
                //JOptionPane.
                 Node n = new Node(text);
                
                  nodes.add(n);  
		}
                    fin_temp1.close();
                }
		// Catches any error conditions
		catch (IOException e)
		{
	         System.err.println ("Nodes are empty");
			//System.exit(-1);
		}
//*******************************************************************************************
                BufferedReader  fin_temp2;		

		try
		{
		    // Open an input stream
		    fin_temp2 = new BufferedReader (new FileReader("Edge.txt"));
                  
                    
                    while(fin_temp2.ready()){
		    //System.out.println( fin2.readLine());
                       String text4 = fin_temp2.readLine();
                StringTokenizer tokenizer2 = new StringTokenizer(text4," ");
                String title1 = tokenizer2.nextToken();
                String nodename = tokenizer2.nextToken();
                String title2 = tokenizer2.nextToken();
                String fromnode = tokenizer2.nextToken();
                //------------
                String title3 = tokenizer2.nextToken();
                String tonode = tokenizer2.nextToken();
                String title4 = tokenizer2.nextToken();
                Double h = Double.parseDouble(tokenizer2.nextToken());
                //JOptionPane.
                Node n1 = new Node(fromnode);
                Node n2 = new Node(tonode);
                Edge e  = new Edge(nodename,n1,n2,h);
                
                  edges.add(e);  
		}
                    fin_temp2.close();
                }
		// Catches any error conditions
		catch (IOException e)
		{
	         System.err.println ("Edges are empty");
			//System.exit(-1);
		}
//*******************************************************************************************
                boolean flag1 = false;
                boolean flag2 = false;
                boolean flag3 = false;
                
                Node N1 = new Node(from_node.getText());
    Node N2 = new Node(to_node.getText());
      if(nodes.isEmpty()){
      nodes.add(N1);
      }
    for(int i = 0; i<nodes.size();i++){
      if(nodes.get(i).toString().equals(N1.toString())){
      flag1 = true;
      
      }
     
    }
    if(!flag1){nodes.add(N1);
    }
    if(nodes.isEmpty()){
      nodes.add(N2);
      }
     for(int j = 0; j<nodes.size();j++){
      if(nodes.get(j).getNode_name().equals(N2.getNode_name())){
      flag2 = true;
      }
     
     }
     if(!flag2){nodes.add(N2);
    }
    
    Edge E = new Edge(road_name.getText(),N1,N2,Double.parseDouble(distance.getText()));
    if(edges.isEmpty()){
      edges.add(E);
      }
    for(int i = 0; i<edges.size();i++){
      if( edges.get(i).toString().equals(E.toString())){
      flag3 =true;
      }
    
     }
    if(!flag3){edges.add(E);
    }
    //update Edge.text
    //***************************************************************************************
                   try
                {
                        // Create a new file output stream
                        // connected to "profile.txt"
                       PrintWriter out_temp1 = new PrintWriter("Edge.txt");

                        // Connect print stream to the output stream
                       // p = new PrintStream( out );
		        for(int i= 0;i<edges.size();i++){
                          out_temp1.println(edges.get(i).toString());  
                          //System.out.println (customer_list.get(i).toString());
                        }
                       // out.println(u1.toString());

                        out_temp1.close();
                }
                    catch (Exception e)
                {
                        System.err.println ("Error writing to file");
                }
         ////update Node.text          
        //***************************************************************************************
                   try
                {
                        // Create a new file output stream
                        // connected to "profile.txt"
                       PrintWriter out_temp2 = new PrintWriter("Node.txt");

                        // Connect print stream to the output stream
                       // p = new PrintStream( out );
		        for(int i= 0;i<nodes.size();i++){
                          out_temp2.println(nodes.get(i).toString());  
                          //System.out.println (customer_list.get(i).toString());
                        }
                       // out.println(u1.toString());

                        out_temp2.close();
                }
                    catch (Exception e)
                {
                        System.err.println ("Error writing to file");
                }
                   
                   this.setVisible(false);
                   new manager_form().setVisible(true);
    // TODO add your handling code here:
}//GEN-LAST:event_createActionPerformed

    /**
     * @param args the command line arguments
     */
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancel;
    private javax.swing.JButton create;
    private javax.swing.JTextField distance;
    private javax.swing.JTextField from_node;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JButton log_out;
    private javax.swing.JTextField road_name;
    private javax.swing.JTextField to_node;
    // End of variables declaration//GEN-END:variables
}
